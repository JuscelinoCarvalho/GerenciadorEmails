/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.math.BigDecimal;
import io.swagger.model.Count;
import io.swagger.model.Created;
import io.swagger.model.Email;
import io.swagger.model.Emails;
import io.swagger.model.Error;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-04-12T22:46:14.551837857Z[GMT]")
@Validated
public interface ApiApi {

    @Operation(summary = "", description = "", tags={ "Email Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Count.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/api/email/count",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Count> apiEmailCountGet(@Parameter(in = ParameterIn.QUERY, description = "Sender Address to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "sender_address", required = false) String senderAddress, @Parameter(in = ParameterIn.QUERY, description = "Receiver Address to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "receiver_address", required = false) String receiverAddress, @Parameter(in = ParameterIn.QUERY, description = "Subject contains to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "subject_contains", required = false) String subjectContains, @Parameter(in = ParameterIn.QUERY, description = "Received on the date" ,schema=@Schema()) @Valid @RequestParam(value = "received_date", required = false) BigDecimal receivedDate);


    @Operation(summary = "", description = "", tags={ "Email Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/api/email",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Error> apiEmailDelete(@Parameter(in = ParameterIn.QUERY, description = "Sender Address to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "sender_address", required = false) String senderAddress, @Parameter(in = ParameterIn.QUERY, description = "Receiver Address to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "receiver_address", required = false) String receiverAddress, @Parameter(in = ParameterIn.QUERY, description = "Subject contains to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "subject_contains", required = false) String subjectContains, @Parameter(in = ParameterIn.QUERY, description = "Received on the date" ,schema=@Schema()) @Valid @RequestParam(value = "received_date", required = false) BigDecimal receivedDate);


    @Operation(summary = "", description = "", tags={ "Email Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Emails.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/api/email",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Emails> apiEmailGet(@Parameter(in = ParameterIn.QUERY, description = "Sender Address to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "sender_address", required = false) String senderAddress, @Parameter(in = ParameterIn.QUERY, description = "Receiver Address to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "receiver_address", required = false) String receiverAddress, @Parameter(in = ParameterIn.QUERY, description = "Subject contains to fetch" ,schema=@Schema()) @Valid @RequestParam(value = "subject_contains", required = false) String subjectContains, @Parameter(in = ParameterIn.QUERY, description = "Received on the date" ,schema=@Schema()) @Valid @RequestParam(value = "received_date", required = false) BigDecimal receivedDate);


    @Operation(summary = "", description = "", tags={ "Email Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Email.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/api/email/{id_email}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Email> apiEmailIdEmailGet(@Parameter(in = ParameterIn.PATH, description = "Email identifier", required=true, schema=@Schema()) @PathVariable("id_email") BigDecimal idEmail);


    @Operation(summary = "", description = "", tags={ "Email Management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Created.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/api/email",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Created> apiEmailPost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Email body);

}

